---
layout: post
title:  "netconf/yang 基本学习"
date: 2020-12-2 15:10:00 +0000
categories: 每周学习一点, netconf, sdn
---

### NetConf/Yang
NetConf 貌似已经是各大公司网络管理公司都会支持的接口, 想对于以前的 CLI 接口, 或者 snmp 接口, 个人理解最大的好处是标准化的接口, 以及安全的底层协议.

![netconf_functional_layers3.png](http://www.netconfcentral.org/static/images/netconf_functional_layers3.png)

#### capability
感觉类似于ssh通信时的一个握手过程, 在 netconf 通信的时候, client 先发 hello 消息, 然后server  回复所有他的 capability, It represents a set of functionality that cannot be diminished by other capabilities. They can be nested (i.e., one capability required in order to support another) but they are always additive.

默认情况下, netconf中定义的capability不会全部暴露给用户, 例如不是所有的 server 都支持 :writable-running. Netconf 本身协议也定义为一个capability 例如如下的分别代表 1.0 和 1.1

* urn:ietf:params:netconf:base:1.0
* urn:ietf:params:netconf:base:1.1

常见的标准 capability 有

| capability | description |
| ----------------------- | -------------------- |
| writable-running | 此能力指明设备支持对<running/>配置数据库的写能力，即设备支持对运行的配置进行<edit-config>和<copy-config>操作 |
| Candidate Configuration | 此能力指明设备支持<candidate/>配置数据库 |
| Confirmed Commit | 此能力指明设备支持协议操作<commit>携带参数<confirmed>和<confirm-timeout> |
| Rollback on Error |此能力指明设备具备错误回滚能力。如果一个错误的条件发生并产生一个错误元素<rpc-error>，那么服务器将会停止处理<edit-config>操作，并把指定的配置恢复至开始执行<edit-config>操作时的完整状态 |
| Distinct Startup |此能力指明设备具备独立启动的能力。NETCONF Agent对参数进行可用性与一致性检查|
| Notification | NETCONF Notification机制是一种基于TCP连接主动通知机制，支持将设备的告警或事件通过notification消息有序的通知网管，解决了网管通过NETCONF协议对设备的告警或事件管理 |
| Interleave | Interleave能力支持NETCONF会话多功能重用。用户可在同一个NETCONF会话上同时对设备进行维护操作和告警、事件管理，减少NETCONF连接资源和连接之间的切换，提升管理效率 |

#### database
个人理解是存储 配置的地方,标准的database 有三种. 在理解这些 database 之前,先要有一个基本概念, 就是 这里的 database 是存在netconf中的, 而netconf只是一个接口, 具体的配置最终需要应用到设备上, 比如路由器.
1. running
目前生效的configuration会保存在这里, 注意的是 running database 还会保存一些当前设备的状态信息, 这就是为什么需要有 <get> 以及 <get-config>的区别, 第二操作会之取出configuration 而地一个会取出状态信息.
2. cadidate
这个这个database里面是保存可能被用到的配置, 但是在submit 之前是不会生效的, 有点类似与 git 里面的 staged 状态的文件. 比如说用户可以修改一些配置, 然后最后submit. 当然,瑞过不需要, 最好 <discard-changes>. 设备会为每个NETCONF会话单独创建一个<candidate/>配置数据库，不同的NETCONF会话的<candidate/>之间，配置数据相互独立。
3. startup
这个database里面保存的是设别下一次启动时候会加载的配置, 如果这个数据库存在, 则不设别不会把 running 的数据保存到 non-volatile 存储器中, 因为这样每次启动就直接加载startup里面的配置. 想对应的, 如果没有startup 则server会在修改running database 的时候同时保存配置, 这样是server 则可以在设备重启的时候从 non-volatile 存储器 读取配置来 设置 设备

#### Yang 格式
Yang 的定义主要是有四种基本模型组成, 在使用 cli 的时候, 一般是container 作为入口config
* leaf node
这个是最简单的, 就是最终节点, 不会有字节点了
```
# YANG Example:
    leaf host-name {
        type string;
        description "Hostname for this system";
    }
-----------------------
# NETCONF XML Example:
    <host-name>my.example.com</host-name>
```

* leaf list node
这个比 leaf 稍微复杂一点, 这个是一个 leaf 的list
```
 YANG Example:
    leaf-list domain-search {
        type string;
        description "List of domain names to search";
    }
-----------------------
# NETCONF XML Example:
    <domain-search>high.example.com</domain-search>
    <domain-search>low.example.com</domain-search>
    <domain-search>everywhere.example.com</domain-search>
```
* container node
这个是真正将基本结构组成数据结构的模型, 配置一本都是属于某一个container 的
```
# YANG Example:
    container system {
        container login {
            leaf message {
                type string;
                description
                    "Message given at start of login session";
            }
        }
    }
-----------------------
# NETCONF XML Example:
    <system>
        <login>
            <message>Good morning</message>
        </login>
    </system>
```
* list nodes 这个其实 是map + list,  就是一个有 key 的数组
```
# YANG Example:
list user {
    key "name";
    leaf name {
        type string;
    }
    leaf full-name {
        type string;
    }
    leaf class {
        type string;
    }
}
-----------------------
# NETCONF XML Example:
     <user>
        <name>glocks</name>
        <full-name>Goldie Locks</full-name>
        <class>intruder</class>
     </user>
     <user>
        <name>snowey</name>
        <full-name>Snow White</full-name>
        <class>free-loader</class>
     </user>
     <user>
        <name>rzell</name>
        <full-name>Rapun Zell</full-name>
        <class>tower</class>
     </user>
```



### Reference
* [Netconf Central NETCONF Documentation](http://www.netconfcentral.org/netconf_docs)
个人感觉非常好的 netconf 基本概念介绍
* [RFC 7950 - The YANG 1.1 Data Modeling Language](https://tools.ietf.org/html/rfc7950)
* [深入浅出理解 YANG 模型 \| Rennesong's blog](http://rennesong.com/2019/07/13/yang-model-tuto/)
* [NETCONF by Example](https://trac.ietf.org/trac/edu/raw-attachment/wiki/IETF94/94-module-3-netconf.pdf)
* [Cisco DevNet: APIs, SDKs, Sandbox, and Community for Cisco Developers](https://developer.cisco.com/site/confD/downloads/)