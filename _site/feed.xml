<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding</title>
    <description></description>
    <link>http://zysimplelife.github.io/</link>
    <atom:link href="http://zysimplelife.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 10 May 2016 11:33:08 +0000</pubDate>
    <lastBuildDate>Tue, 10 May 2016 11:33:08 +0000</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Why JAXB need Object factory </title>
        <description>&lt;p&gt;Oracle docs say:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;When XML element information can not be inferred by the derived Java representation of the XML content, a JAXBElement object is provided. This object has methods for getting and setting the object name and object value. Link here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There are a few use cases where a JAXBElement is required:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;An element is both nillable=”true” and minOccurs=”0”. In this case what does null on the mapped field/property mean? When the property is JAXBElement a null value means the element isn’t present and a JAXBElement wrapping null means an XML element with xsi:nil=”true”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There are 2 global elements with the same named complex type. Since in JAXB classes correspond to complex types a way is needed to capture which root element was encountered.
  http://blog.bdoughan.com/2012/07/jaxb-and-root-elements.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is a choice structure where either foo or bar elements can occur and they are the same type. Here a JAXBElement is required because simply encountering a String value isn’t enough to indicate which element should be marshalled.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An element with xsi:nil is encountered in the document that contains attributes. In this example the object corresponding to that element can still be unmarshalled to hold the attribute values, but JAXBElement can stil indicate that the element was null.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:16:00 +0000</pubDate>
        <link>http://zysimplelife.github.io/webservice/2016/05/10/object-factory.html</link>
        <guid isPermaLink="true">http://zysimplelife.github.io/webservice/2016/05/10/object-factory.html</guid>
        
        
        <category>WebService</category>
        
      </item>
    
      <item>
        <title>Jaxb Basic </title>
        <description>&lt;p&gt;JAXB is a very very basic and old fashion topic, but it seem I do no understand it enough.  It make me somehow confusing when I need solve some details issues.  So, I want to summary some experience of it to organize thought.&lt;/p&gt;

&lt;p&gt;At Beginning of the background&lt;/p&gt;

&lt;p&gt;My understanding of JAXB is to use Java Class with annotation to stand for a XML schema. It very useful to handle a stable structured data model link SOAP protocol which make it very popular in enterprise application rather than web app.&lt;/p&gt;

&lt;p&gt;But  because of the difference between  xml and java class,   there are a lot of limitation which need complex extension configuration  to adapt that.&lt;/p&gt;

&lt;p&gt;My project is trying to translate from ASN.1 to and JAXB defined class for migration from old system to next generation.  I need to fix a lot of problem to make the translation work.&lt;/p&gt;

&lt;p&gt;Before make details job,  it is good to review Jaxb basic knowledge with this web page of JAXB Tutorial&lt;/p&gt;

&lt;p&gt;Unmarshalling&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;docClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPackage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JAXBContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;packageName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Unmarshaller&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUnmarshaller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;JAXBElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JAXBElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unmarshal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Marshalling&lt;/p&gt;

&lt;p&gt;Usually hidden in the middle of the list of the classes derived from the types defined in an XML schema there will be one class called ObjectFactory. It’s convenient to use the methods of this class because they provide an easy way of creating elements that have to be represented by a JAXBElement&amp;lt;?&amp;gt; object. Given that the top-level element of a document is represented as a JAXBElement&lt;rulebasetype&gt; with the tag “rulebase”, one such doument object can be created by code as shown below.&lt;/rulebasetype&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;ObjectFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objFact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjectFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RulebaseType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rulebase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objFact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createRulebaseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JAXBElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RulebaseType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objFact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createRulebase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rulebase&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 10 May 2016 00:16:00 +0000</pubDate>
        <link>http://zysimplelife.github.io/webservice/2016/05/10/Jaxb-basic.html</link>
        <guid isPermaLink="true">http://zysimplelife.github.io/webservice/2016/05/10/Jaxb-basic.html</guid>
        
        
        <category>WebService</category>
        
      </item>
    
      <item>
        <title>Create your work environment with docker </title>
        <description>&lt;p&gt;create the docker machine&lt;/p&gt;

&lt;pre&gt;
docker-machine create -d virtualbox dev
&lt;/pre&gt;

&lt;p&gt;create a docker volume according to https://github.com/CWSpear/local-persist&lt;/p&gt;
&lt;pre&gt;
docker run -d \
    -v /run/docker/plugins/:/run/docker/plugins/ \
    -v /path/to/where/you/want/data/volume/:/path/to/where/you/want/data/volume\ cwspear/docker-local-persist-volume-plugin

docker volume create -d local-persist -o mountpoint=[your workspace path] --name=workspace
&lt;/pre&gt;

&lt;p&gt;work with that, for example&lt;/p&gt;
&lt;pre&gt;
docker run -it -v workspace:/workspace -P jekyll/jekyll sh
&lt;/pre&gt;
</description>
        <pubDate>Mon, 09 May 2016 15:16:00 +0000</pubDate>
        <link>http://zysimplelife.github.io/docker/2016/05/09/Jekyll-in-docker.html</link>
        <guid isPermaLink="true">http://zysimplelife.github.io/docker/2016/05/09/Jekyll-in-docker.html</guid>
        
        
        <category>Docker</category>
        
      </item>
    
  </channel>
</rss>
